/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view.model;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.FormUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.algebra.view.model.table.DirectorTableModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Jo
 */
public class DirectorEditPanel extends javax.swing.JPanel {

    private List<JTextComponent> fields;
    private List<JLabel> labels;
    private static final String DIR = "assets";
    private Repository directorRepository;
    private Repository movieRepository;
    private DirectorTableModel directorTableModel;
    private  Director selectedDirector;
    private final List<Movie> movies = new ArrayList<>();
    private List<Movie> allMovies = new ArrayList<>();
    private final DefaultListModel<Movie> allMoviesModel = new DefaultListModel<>();
    private final DefaultListModel<Movie> moviesModel = new DefaultListModel<>();

    /**
     * Creates new form ActorEditPanel
     */
    public DirectorEditPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIcon = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDirectorTable = new javax.swing.JTable();
        lblNameOfDirector = new javax.swing.JLabel();
        btnDirectorDelete = new javax.swing.JButton();
        lblErrorDirectorChoose = new javax.swing.JLabel();
        btnDirecotrChoose = new javax.swing.JButton();
        tfDirectorPicturePath = new javax.swing.JTextField();
        btnDirecotrUpdate = new javax.swing.JButton();
        btnDirectorAdd = new javax.swing.JButton();
        tfDirectorFirstName = new javax.swing.JTextField();
        lblErrorDirectorIcon = new javax.swing.JLabel();
        lblErrorDirectorFirstName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblErrorDirectorMovies = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllMovies = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsMovieDirector = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnClearList = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(230, 230, 249));
        setPreferredSize(new java.awt.Dimension(1192, 768));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hr/assets/no_image.png"))); // NOI18N
        lblIcon.setRequestFocusEnabled(false);

        tbDirectorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbDirectorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDirectorTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbDirectorTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbDirectorTable);

        lblNameOfDirector.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblNameOfDirector.setText("IME I PREZIME REDATELJA");

        btnDirectorDelete.setBackground(new java.awt.Color(255, 153, 153));
        btnDirectorDelete.setText("Delete");
        btnDirectorDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorDeleteActionPerformed(evt);
            }
        });

        lblErrorDirectorChoose.setForeground(new java.awt.Color(255, 0, 51));

        btnDirecotrChoose.setText("Choose");
        btnDirecotrChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirecotrChooseActionPerformed(evt);
            }
        });

        btnDirecotrUpdate.setText("Update");
        btnDirecotrUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirecotrUpdateActionPerformed(evt);
            }
        });

        btnDirectorAdd.setText("Add");
        btnDirectorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorAddActionPerformed(evt);
            }
        });

        lblErrorDirectorIcon.setForeground(new java.awt.Color(255, 0, 51));

        lblErrorDirectorFirstName.setForeground(new java.awt.Color(255, 0, 51));

        jLabel2.setText("Name");

        lblErrorDirectorMovies.setForeground(new java.awt.Color(255, 0, 51));

        jLabel4.setText("Movies:");

        jScrollPane3.setViewportView(lsAllMovies);

        jScrollPane4.setViewportView(lsMovieDirector);

        jLabel1.setText("Drag and drop directors:");

        btnClearList.setBackground(new java.awt.Color(255, 153, 153));
        btnClearList.setForeground(new java.awt.Color(0, 51, 51));
        btnClearList.setText("X");
        btnClearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblErrorDirectorChoose)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfDirectorPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDirecotrChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblErrorDirectorIcon)
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblNameOfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnClearList))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfDirectorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnDirectorAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDirecotrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDirectorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(643, 643, 643)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblErrorDirectorMovies, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblErrorDirectorFirstName, javax.swing.GroupLayout.Alignment.TRAILING))))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNameOfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorDirectorIcon))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDirectorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblErrorDirectorFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorDirectorMovies)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClearList, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDirecotrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDirectorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDirectorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDirecotrChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDirectorPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrorDirectorChoose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDirectorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorAddActionPerformed
        if (FormUtils.formValid(fields, labels)) {
            try {
                String localPicturePath = uploadPicture();

                Director director = new Director(
                        tfDirectorFirstName.getText().trim(),
                        localPicturePath,
                        movies
                );

                directorRepository.createOne(director);
                directorTableModel.setDirectors(directorRepository.selectList());
                clearForm();

            } catch (Exception ex) {
                Logger.getLogger(MovieEditPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create director!");
            }
        } else {
            MessageUtils.showInformationMessage("info", "Please input data");
        }

    }//GEN-LAST:event_btnDirectorAddActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnDirecotrChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirecotrChooseActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");

        tfDirectorPicturePath.setText(file.get().getAbsolutePath());
        try {
            setIcon(lblIcon, file);
        } catch (IOException ex) {
            Logger.getLogger(DirectorEditPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("No photo", "I am not able to read that photo");
        }    }//GEN-LAST:event_btnDirecotrChooseActionPerformed

    private void btnDirecotrUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirecotrUpdateActionPerformed
        if (selectedDirector == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please select a director!");
            return;
        }
        if (FormUtils.formValid(fields, labels)) {

            try {
                if (selectedDirector.getPicturePath() == null) {
                    selectedDirector.setPicturePath(tfDirectorPicturePath.getText().trim());
                }
                if (!tfDirectorPicturePath.getText().trim().equals(selectedDirector.getPicturePath())) {
                    Files.deleteIfExists(Paths.get(selectedDirector.getPicturePath()));
                }

                selectedDirector.setDirectorName(tfDirectorFirstName.getText().trim());
                selectedDirector.setMovies(lsMovieDirector.getSelectedValuesList());

                directorRepository.updateOne(selectedDirector.getId(), selectedDirector);
                directorTableModel.setDirectors(directorRepository.selectList());
                 MessageUtils.showInformationMessage("YAY", "Director updated!");
                clearForm();

            } catch (Exception ex) {
                Logger.getLogger(MovieEditPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("ERROR", "Unable to update the director");
            }
        }
    }//GEN-LAST:event_btnDirecotrUpdateActionPerformed

    private void btnDirectorDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorDeleteActionPerformed
        if (selectedDirector == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose director to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete director",
                "Do you really want to delete director?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedDirector.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedDirector.getPicturePath()));
                }
                directorRepository.deleteOne(selectedDirector.getId());
                directorTableModel.setDirectors(directorRepository.selectList());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(DirectorEditPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete director!");
            }
            }    }//GEN-LAST:event_btnDirectorDeleteActionPerformed

    private void tbDirectorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDirectorTableMouseClicked
     
    }//GEN-LAST:event_tbDirectorTableMouseClicked

    private void btnClearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearListActionPerformed
        moviesModel.clear();
        lsMovieDirector.clearSelection();
    }//GEN-LAST:event_btnClearListActionPerformed

    private void tbDirectorTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDirectorTableMouseReleased
        showDirector();
    }//GEN-LAST:event_tbDirectorTableMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearList;
    private javax.swing.JButton btnDirecotrChoose;
    private javax.swing.JButton btnDirecotrUpdate;
    private javax.swing.JButton btnDirectorAdd;
    private javax.swing.JButton btnDirectorDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblErrorDirectorChoose;
    private javax.swing.JLabel lblErrorDirectorFirstName;
    private javax.swing.JLabel lblErrorDirectorIcon;
    private javax.swing.JLabel lblErrorDirectorMovies;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblNameOfDirector;
    private javax.swing.JList<Movie> lsAllMovies;
    private javax.swing.JList<Movie> lsMovieDirector;
    private javax.swing.JTable tbDirectorTable;
    private javax.swing.JTextField tfDirectorFirstName;
    private javax.swing.JTextField tfDirectorPicturePath;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            loadAllMovies();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(MovieEditPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecovarable", "Exiting");
            System.exit(1);
        }
    }

    private void initValidation() {
        fields = Arrays.asList(tfDirectorFirstName, tfDirectorPicturePath);
        labels = Arrays.asList(lblErrorDirectorFirstName, lblErrorDirectorMovies, lblErrorDirectorChoose, lblIcon);
    }

    private void initRepository() throws IOException {
        directorRepository = RepositoryFactory.getDirectorRepository();
        movieRepository = RepositoryFactory.getMovieRepository();
    }

    private void initTable() throws Exception {
        tbDirectorTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbDirectorTable.setAutoCreateRowSorter(true);

        tbDirectorTable.setRowHeight(25);

        directorTableModel = new DirectorTableModel(directorRepository.selectList());
        tbDirectorTable.setModel(directorTableModel);
    }

    private void clearForm() {
        fields.forEach(e -> e.setText(""));
        labels.forEach(e -> e.setText(""));
        //   lblIcon.setIcon(new ImageIcon(getClass().getResource("/assets/no_image.png")));
        lsMovieDirector.removeAll();
        selectedDirector = null;
        lsMovieDirector.clearSelection();
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfDirectorPicturePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void setIcon(JLabel label, Optional<File> file) throws IOException {
        label.setIcon(IconUtils.createIcon(file.get().getAbsolutePath(), label.getWidth(), label.getHeight()));
    }

    private void initDragNDrop() {
        lsAllMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllMovies.setDragEnabled(true);
        lsAllMovies.setTransferHandler(new ExportTransferHandler());

        lsMovieDirector.setDropMode(DropMode.ON);
        lsMovieDirector.setTransferHandler(new ImportTransferHandler());
    }

    private void loadAllMovies() throws Exception {
        allMoviesModel.clear();
        allMovies = movieRepository.selectList();
        allMovies.forEach(allMoviesModel::addElement);
        lsAllMovies.setModel(allMoviesModel);
    }

    private void showDirector() {
        int selectedRow = tbDirectorTable.getSelectedRow();
        int rowIndex = tbDirectorTable.convertRowIndexToModel(selectedRow);
        int selectedId = (int) tbDirectorTable.getValueAt(rowIndex, 0);

        try {
            Optional<Director> opt = directorRepository.selectOne(selectedId);
            if (opt.isPresent()) {
                selectedDirector = opt.get();
                fillform(selectedDirector);
            }
        } catch (Exception ex) {
            Logger.getLogger(DirectorEditPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to fetch director");
        }
    }

    private void fillform(Director director) throws IOException {
        clearForm();
        lblNameOfDirector.setText("");
        lblNameOfDirector.setText(director.getDirectorName());
        tfDirectorFirstName.setText(director.getDirectorName());
        if (director.getPicturePath() != null && Files.exists(Paths.get(director.getPicturePath()))) {
            tfDirectorPicturePath.setText(director.getPicturePath());
            lblIcon.setIcon(IconUtils.createIcon(director.getPicturePath(), lblIcon.getWidth(), lblIcon.getHeight()));
        }
        moviesModel.clear();
        director.getMovies().forEach((m) -> {
            movies.add(m);
        });
        movies.forEach(moviesModel::addElement);
        lsMovieDirector.setModel(moviesModel);
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new MovieTransferable(lsAllMovies.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(MovieTransferable.MOVIE_TRANSFERABLE);
        }

        @Override
        public boolean importData(TransferSupport support) {
            try {
                Transferable transferable = support.getTransferable();

                Movie add = (Movie) transferable.getTransferData(MovieTransferable.MOVIE_TRANSFERABLE);
                if (movies.add(add)) {
                    loadMovieModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(DirectorEditPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private void loadMovieModel() {
        moviesModel.clear();
        movies.forEach(moviesModel::addElement);
        lsMovieDirector.setModel(moviesModel);
    }
}
